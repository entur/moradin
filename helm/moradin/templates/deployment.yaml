apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "app.name" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels" . | indent 4 }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "app.name" . }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "common.labels" . | indent 8 }}
    spec:
      containers:
        - name: elasticsearch
          image: {{ .Values.images.elasticsearch }}
          imagePullPolicy: {{ .Values.images.imagePullPolicy }}
          env:
            - name: TZ
              value: Europe/Oslo
          ports:
            - containerPort: 9200
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: _cluster/health?wait_for_status=yellow&timeout=120s
              port: 9200
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 20
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - sleep 30
          resources:
            limits:
              cpu: 1
              memory: 1600Mi
            requests:
              cpu: 1
              memory: 1600Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File

        - name: {{ .Chart.Name }}
          image: {{ .Values.images.moradin }}
          imagePullPolicy: {{ .Values.images.imagePullPolicy }}
          env:
            - name: TZ
              value: Europe/Oslo
            - name: PORT
              value: "4000"
          resources:
            limits:
              cpu: 1
              memory: 1000Mi
            requests:
              cpu: 1
              memory: 1000Mi
          ports:
            - containerPort: 4000
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: status
              port: 4000
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      serviceAccountName: application
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      terminationGracePeriodSeconds: 45
      topologySpreadConstraints:
        - maxSkew: 3
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: {{ template "app.name" . }}
        - maxSkew: 5
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway